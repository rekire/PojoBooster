apply plugin:'java'

//noinspection GroovyAssignabilityCheck
jar {
    manifest {
        attributes 'Manifest-Version': '1.0',
                'Main-Class': 'eu.rekisoft.java.pojobooster.Test'
    }
}

configurations {
    provided
    compile.extendsFrom provided
}
sourceSets {
    main {
        compileClasspath += configurations.provided
        // TODO this DSL should be added by the gradle plugin
        java {
            srcDir "src/generated"
        }
    }
}

def testDir = file("test/main/java");
if (testDir.exists()) {
    // Replace the built-in test task with one that will delegate to jtreg
    def jtrefFiles = files("/Users/rbair/Downloads/jtreg/lib/testng.jar",
              "/Users/rbair/Downloads/jtreg/lib/jtreg.jar",
              "/Users/rbair/Downloads/jtreg/lib/javatest.jar")
    dependencies {
//        testCompile ":jtreg-4.1-bin-b05_29_nov_2012.zip"
//        files("/Users/rbair/Downloads/jtreg/lib/testng.jar",
//              "/Users/rbair/Downloads/jtreg/lib/jtreg.jar",
//              "/Users/rbair/Downloads/jtreg/lib/javatest.jar")
    }
    tasks.replace("test");
    test {
        // Invoke jtreg
        task jtreg (type: Exec) {
            dependsOn testClasses
            group = "Verification"
//            inputs.dir "src/main/prism-common-native"
//            outputs.dir "build/main/prism-common-native"
//            outputs.dir "build/libs"
            workingDir "."
            commandLine "java", "-jar", "/Users/rbair/Downloads/jtreg/lib/jtreg.jar", "-v", "-c", "-dir:test/main/java", "-r:build/reports/test", "-w:build/test/whatever", "-avm"
            commandLine "ls"
        }
        dependsOn jtreg
        group = "Verification"
    }
//} else {
//    tasks.replace("test");
}

//noinspection GroovyAssignabilityCheck
dependencies {
    compile project(':annotations')
    compileOnly project(':preprocessor')
    provided 'com.google.android:android:4.1.1.4'
    provided 'com.google.android:annotations:4.1.1.4'
    provided 'com.android.databinding:baseLibrary:2.2.0-alpha5'
}

task deleteGeneratedCode(type: Delete) {
    delete "src/generated"
}

if (project.tasks.findByName('clean')) {
    //logger.debug('Found build task, making it dependant on assemble...')
    project.tasks.getByName('clean').dependsOn project.deleteGeneratedCode
}